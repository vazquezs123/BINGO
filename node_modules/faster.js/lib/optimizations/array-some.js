'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.createVisitor = createVisitor;

var _utils = require('../utils');

exports.default = createVisitor(false);

/**
 * Returns a function that returns a  visitor that rewrites
 * array.some() or array.every() calls as a for loop.
 *
 * Only supports assignments and single declarations:
 *     result = arr.some(f); // assignment
 *     const result = arr.some(f); // single declaration
 *
 * Only supports 1 argument:
 *     arr.some(f); // valid call with 1 argument
 *     arr.some(f, this); // unsupported call with 2 arguments
 */

function createVisitor(every) {
	var methodName = every ? 'every' : 'some';
	return function (t) {
		return {
			ExpressionStatement(path, state) {
				var expression = path.node.expression;
				if (!(0, _utils.isIdAssignment)(t, expression) || !(0, _utils.isMethodCall)(t, expression.right, methodName) || expression.right.arguments.length !== 1) {
					return;
				}

				var somePath = path.get('expression.right');
				var assignee = expression.left;

				// If the array is the assignee, we need a temp var to hold the array.
				var array = expression.right.callee.object;
				if (t.isIdentifier(array) && array.name === assignee.name) {
					somePath.get('callee.object').replaceWith((0, _utils.defineId)(t, path, array, 'const', 'arr'));
				}

				var initAssignment = t.assignmentExpression('=', assignee, t.booleanLiteral(every));
				path.insertBefore(t.expressionStatement(initAssignment));

				path.replaceWith(forLoop(t, path, assignee, somePath, every));
			},

			VariableDeclaration(path, state) {
				if (path.node.declarations.length !== 1) return;

				var declaration = path.node.declarations[0];
				if (!(0, _utils.isMethodCall)(t, declaration.init, methodName) || declaration.init.arguments.length !== 1) {
					return;
				}

				var assignee = declaration.id;
				var tempAssignee = (0, _utils.defineId)(t, path, t.booleanLiteral(every), 'let', 'temp');

				var somePath = path.get('declarations.0.init');
				path.insertBefore(forLoop(t, path, tempAssignee, somePath, every));
				somePath.replaceWith(tempAssignee);
			}
		};
	};
}

function forLoop(t, path, assignee, somePath, every) {
	var array = (0, _utils.defineIdIfNeeded)(t, somePath.get('callee.object'), path);
	var func = (0, _utils.extractDynamicFuncIfNeeded)(t, somePath, path);
	var i = path.scope.generateUidIdentifier('i');

	var newSomeCall = t.callExpression(func, [t.memberExpression(array, i, true), i, array]);
	if (every) {
		newSomeCall = t.unaryExpression('!', newSomeCall);
	}
	var forBody = t.blockStatement([t.ifStatement(newSomeCall, t.blockStatement([t.expressionStatement(t.assignmentExpression('=', assignee, t.booleanLiteral(!every))), t.breakStatement()]))]);

	return (0, _utils.basicArrayForLoop)(t, i, array, forBody);
}